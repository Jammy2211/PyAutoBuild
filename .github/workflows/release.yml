name: Autolens Release process

on: 
  workflow_dispatch:
    inputs:
      minor_version:
        description: 'Minor version to release'
        required: true
        default: '1'
  push:

jobs:
  release_test_pypi:
        runs-on: ubuntu-latest
        env:
          TWINE_REPOSITORY: testpypi
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI }}
        strategy:
          matrix:
            python-version: [3.8]  # 3.9 not supported on numba as of 2020-02-11
            project:
              - repository: 'rhayes777/PyAutoConf'
                ref: 'master'
                path: 'PyAutoConf'
              - repository: 'rhayes777/PyAutoFit'
                ref: 'master'
                path: 'PyAutoFit'
              - repository: 'Jammy2211/PyAutoArray'
                ref: 'master'
                path: 'PyAutoArray'
              - repository: 'Jammy2211/PyAutoGalaxy'
                ref: 'master'
                path: 'PyAutoGalaxy'
              - repository: 'Jammy2211/PyAutoLens'
                ref: 'master'
                path: 'PyAutoLens'
        steps:
        - uses: actions/checkout@v2
          with:
              path: PyAutoBuild
        - name: Checkout
          uses: actions/checkout@v2
          with:
            repository: "${{ matrix.project.repository }}"
            ref: "${{ matrix.project.ref }}"
            path: "${{ matrix.project.path }}"
        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v2
          with:
            python-version: ${{ matrix.python-version }}
        - name: Compute version number
          run: |
            export DATE_FORMATTED=`date +"%Y.%-m.%-d"`
            MINOR_VERSION="${{ github.event.inputs.minor_version }}"
            VERSION="${DATE_FORMATTED}.${MINOR_VERSION:-${{ github.run_number }}}"
            RUN_ATTEMPT="${{ github.run_attempt }}"
            if [ "$RUN_ATTEMPT" -gt "1" ]
            then
                VERSION="$VERSION.$RUN_ATTEMPT"
            fi
            export VERSION
            echo "::set-output name=version-number::${VERSION}"
          id: version_number
        - name: Build
          run: |
            pushd "${{ matrix.project.path }}"
            export VERSION="${{ steps.version_number.outputs.version-number }}"
            sed -i "s/__version__ = [\.\"\'0-9]*/__version__ = \"$VERSION\"/g" */__init__.py
            python3 -m pip install --upgrade build
            python3 -m build
            popd
        - name: Release
          run: |
            python3 -m pip install twine
            pushd "${{ matrix.project.path }}"
            python3 -m twine upload --repository testpypi dist/*
            popd
        - name: Wait for packages to upload to Pypi
          shell: bash {0}   # So that we do not exit if a command gives a bad exit code
          run: |
            export PACKAGES=("autoconf" "autoarray" "autofit" "autogalaxy" "autolens")
            export VERSION="${{ steps.version_number.outputs.version-number }}"
            for PACKAGE in ${PACKAGES[@]}; do
              python3 -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple $PACKAGE==$VERSION
              test_condition=$?
              cnt=0
              while [[ $test_condition != "0" ]]; do
                echo "Failed to find package, retrying in 10 seconds.."
                sleep 10
                ((cnt=cnt+1))
                [[ $cnt == "100" ]] && echo "Timed out, tried 100 times" && break
                python3 -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple $PACKAGE==$VERSION
                test_condition=$?
              done
            done
        - name: Run unittests
          run: |
            pushd "${{ matrix.project.path }}"
            if test -f "optional_requirements.txt"
            then
              pip install Cython
              pip install -r optional_requirements.txt
            fi
            python3 -m pytest

#
#   release:
#     runs-on: ubuntu-latest
#     env:
#       TWINE_REPOSITORY: testpypi
#       TWINE_USERNAME: __token__
#       TWINE_PASSWORD: ${{ secrets.TEST_PYPI }}
#     strategy:
#       matrix:
#         python-version: [3.8]  # 3.9 not supported on numba as of 2020-02-11
#     steps:
#     - uses: actions/checkout@v2
#       with:
#         path: PyAutoBuild
#     - name: Checkout autolens_workspace
#       uses: actions/checkout@v2
#       with:
#         repository: Jammy2211/autolens_workspace
#         ref: master
#         path: autolens_workspace
#     - name: Checkout autofit_workspace
#       uses: actions/checkout@v2
#       with:
#         repository: Jammy2211/autofit_workspace
#         ref: master
#         path: autofit_workspace
#     - name: Checkout autolens_workspace_test
#       uses: actions/checkout@v2
#       with:
#         repository: Jammy2211/autolens_workspace_test
#         ref: master
#         path: autolens_workspace_test
#     - name: Checkout PyAutoConf
#       uses: actions/checkout@v2
#       with:
#         repository: rhayes777/PyAutoConf
#         ref: master
#         path: PyAutoConf
#     - name: Checkout PyAutoFit
#       uses: actions/checkout@v2
#       with:
#         repository: rhayes777/PyAutoFit
#         ref: master
#         path: PyAutoFit
#     - name: Checkout PyAutoArray
#       uses: actions/checkout@v2
#       with:
#         repository: Jammy2211/PyAutoArray
#         ref: master
#         path: PyAutoArray
#     - name: Checkout PyAutoGalaxy
#       uses: actions/checkout@v2
#       with:
#         repository: Jammy2211/PyAutoGalaxy
#         ref: master
#         path: PyAutoGalaxy
#     - name: Checkout PyAutoLens
#       uses: actions/checkout@v2
#       with:
#         repository: Jammy2211/PyAutoLens
#         ref: master
#         path: PyAutoLens
#     - name: Set up Python ${{ matrix.python-version }}
#       uses: actions/setup-python@v2
#       with:
#         python-version: ${{ matrix.python-version }}
#     - name: Compute version number
#       run: |
#         export DATE_FORMATTED=`date +"%Y.%-m.%-d"`
#         MINOR_VERSION="${{ github.event.inputs.minor_version }}"
#         export VERSION="${DATE_FORMATTED}.${MINOR_VERSION:-${{ github.run_number }}}"
#         echo "::set-output name=version-number::${VERSION}"
#       id: version_number
#     - name: Test release all packages
#       run: |
#         python3 -m pip install twine
#         pushd PyAutoBuild
#         python3 release.py --mode=test --version "${{ steps.version_number.outputs.version-number }}"
#         popd
#         pushd PyAutoFit
#         python3 -m twine upload --repository testpypi dist/*
#         popd
#     - name: Pip freeze
#       run: |
#         python3 -m pip freeze
# #     - name: Unit tests for all projects
# #       run: |
# #         python3 -m pip install pytest numpy Cython
# #         export PROJECTS=("PyAutoConf" "PyAutoArray" "PyAutoFit" "PyAutoGalaxy" "PyAutoLens")
# #         for PROJECT in ${PROJECTS[@]}; do
# #           pushd $PROJECT
# #           pip install -r requirements.txt
# #           if test -f "optional_requirements.txt"
# #           then
# #             pip install -r optional_requirements.txt
# #           fi
# #           export PYTHONPATH="$PYTHONPATH:$(pwd)"
# #           python3 -m pytest
# #           popd
# #         done
#     - name: Run Python scripts autolens
#       run: |
#         echo $PYTHONPATH
#         which python3
#         pushd PyAutoBuild
#         export PYTHONPATH=$PYTHONPATH:../
#         python3 autolens/run_python.py
#     - name: Run Python scripts autofit
#       run: |
#         pushd PyAutoBuild
#         export PYTHONPATH=$PYTHONPATH:../
#         python3 autofit/run_python.py
#     - name: Wait for packages to upload to Pypi
#       shell: bash {0}   # So that we do not exit if a command gives a bad exit code
#       run: |
#         export PACKAGES=("autoconf" "autoarray" "autofit" "autogalaxy" "autolens")
#         export VERSION="${{ steps.version_number.outputs.version-number }}"
#         for PACKAGE in ${PACKAGES[@]}; do
#           python3 -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple $PACKAGE==$VERSION
#           test_condition=$?
#           cnt=0
#           while [[ $test_condition != "0" ]]; do
#             echo "Failed to find package, retrying in 10 seconds.."
#             sleep 10
#             ((cnt=cnt+1))
#             [[ $cnt == "100" ]] && echo "Timed out, tried 100 times" && break
#             python3 -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple $PACKAGE==$VERSION
#             test_condition=$?
#           done
#         done
#     - name: Install Jupyter dependency
#       run: |
#         pip install jupyter ipynb-py-convert
#     - name: Generate jupyter notebooks (autofit)
#       run: |
#         pushd PyAutoBuild
#         export PYTHONPATH=$PYTHONPATH:../
#         python3 autofit/generate.py
#     - name: Generate jupyter notebooks (autolens)
#       run: |
#         pushd PyAutoBuild
#         export PYTHONPATH=$PYTHONPATH:../
#         python3 autolens/generate.py
#     - name: Run jupyter notebooks (autofit)
#       run: |
#         pushd PyAutoBuild
#         export PYTHONPATH=$PYTHONPATH:../
#         python3 autofit/run.py
#     - name: Generate jupyter notebooks (autolens)
#       run: |
#         pushd PyAutoBuild
#         export PYTHONPATH=$PYTHONPATH:../
#         python3 autolens/run.py
#     #- name: Git commit, tag, merge and release everything
#     #  run: |
#     #    pushd PyAutoBuild
#     #    python3 tag_and_merge.py --version ${{ github.event.inputs.minor_version }}
#     #- name: Prod release all packages
#     #  run: |
#     #    python3 release.py --mode=prod  --version "${{ steps.version_number.outputs.version-number }}"
