name: PyAuto Release

on:
  push:
  workflow_dispatch:
    inputs:
      minor_version:
        description: 'Minor version to release'
        required: true
        default: '1'

jobs:
  version_number:
    runs-on: ubuntu-latest
    outputs:
      version_number: ${{ steps.version_number.outputs.version_number }}
    steps:
      - name: Compute version number
        run: |
          export DATE_FORMATTED=`date +"%Y.%-m.%-d"`
          MINOR_VERSION="${{ github.event.inputs.minor_version }}"
          VERSION="${DATE_FORMATTED}.${MINOR_VERSION:-${{ github.run_number }}}"
          RUN_ATTEMPT="${{ github.run_attempt }}"
          if [ "$RUN_ATTEMPT" -gt "1" ]
          then
              VERSION="$VERSION.$RUN_ATTEMPT"
          fi
          export VERSION
          echo "::set-output name=version_number::${VERSION}"
        id: version_number

  release_test_pypi:
        runs-on: ubuntu-latest
        needs: version_number
        env:
          TWINE_REPOSITORY: testpypi
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI }}
        strategy:
          matrix:
            python-version: [3.8]
            project:
              - repository: rhayes777/PyAutoConf
                ref: master
                path: PyAutoConf
              - repository: rhayes777/PyAutoFit
                ref: master
                path: PyAutoFit
              - repository: Jammy2211/PyAutoArray
                ref: master
                path: PyAutoArray
              - repository: Jammy2211/PyAutoGalaxy
                ref: master
                path: PyAutoGalaxy
              - repository: Jammy2211/PyAutoLens
                ref: master
                path: PyAutoLens
        steps:
        - uses: actions/checkout@v2
          with:
              path: PyAutoBuild
        - name: Checkout
          uses: actions/checkout@v2
          with:
            repository: "${{ matrix.project.repository }}"
            ref: "${{ matrix.project.ref }}"
            path: "${{ matrix.project.path }}"
        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v2
          with:
            python-version: ${{ matrix.python-version }}
        - name: Build
          run: |
            pushd "${{ matrix.project.path }}"
            export VERSION="${{ needs.version_number.outputs.version_number }}"
            sed -i "s/__version__ = [\.\"\'0-9]*/__version__ = \"$VERSION\"/g" */__init__.py
            python3 -m pip install --upgrade build
            python3 -m build
            popd
        - name: Upload to test PyPI
          run: |
            python3 -m pip install twine
            pushd "${{ matrix.project.path }}"
            python3 -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*
            popd
        - name: Wait for packages to upload to Pypi
          shell: bash {0}   # So that we do not exit if a command gives a bad exit code
          run: |
            export PACKAGES=("autoconf" "autoarray" "autofit" "autogalaxy" "autolens")
            export VERSION="${{ needs.version_number.outputs.version_number }}"
            for PACKAGE in ${PACKAGES[@]}; do
              python3 -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple $PACKAGE==$VERSION
              test_condition=$?
              cnt=0
              while [[ $test_condition != "0" ]]; do
                echo "Failed to find package, retrying in 10 seconds.."
                sleep 10
                ((cnt=cnt+1))
                [[ $cnt == "100" ]] && echo "Timed out, tried 100 times" && break
                python3 -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple $PACKAGE==$VERSION
                test_condition=$?
              done
            done
#         - name: Run unittests
#           run: |
#             pushd "${{ matrix.project.path }}"
#             if test -f "optional_requirements.txt"
#             then
#               pip install Cython
#               pip install -r optional_requirements.txt
#             fi
#             pip install pytest
#             python3 -m pytest

  find_scripts:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          config:
            - directories: scripts,build
              type: scripts
            - directories: notebooks
              type: notebooks
      outputs:
        scripts_matrix: ${{ steps.script_matrix.outputs.scripts_matrix }}
        notebooks_matrix: ${{ steps.script_matrix.outputs.notebooks_matrix }}
      steps:
        - name: Checkout AutoFit
          uses: actions/checkout@v2
          with:
            repository: Jammy2211/autofit_workspace
            path: autofit
        - name: Checkout AutoLens
          uses: actions/checkout@v2
          with:
            repository: Jammy2211/autolens_workspace
            path: autolens_test
        - name: Checkout AutoLens Test
          uses: actions/checkout@v2
          with:
            repository: Jammy2211/autolens_workspace_test
            path: autolens
        - uses: actions/checkout@v2
          with:
              path: PyAutoBuild
        - name: Make script matrix
          id: script_matrix
          run: |
            echo "${{ matrix.config.directories }}"
            matrix="$(./PyAutoBuild/autobuild/script_matrix.py ${{ matrix.config.directories }} autofit autolens autolens_test)"
            name="${{ matrix.config.type }}_matrix"
            echo "::set-output name=$name::$matrix"

  run_scripts:
    runs-on: ubuntu-latest
    needs:
      - release_test_pypi
      - version_number
      - find_scripts
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]
        project:
            ${{ fromJSON(needs.find_scripts.outputs.scripts_matrix) }}
    steps:
    - name: Configure
      id: configure
      run: |
        if [ ${{ matrix.project.name }} == "autolens" ]
        then
            echo "::set-output name=repository::Jammy2211/PyAutoLens"
            echo "::set-output name=workspace_repository::Jammy2211/autolens_workspace"
            echo "::set-output name=project::autolens"
        elif [ ${{ matrix.project.name }} == "autolens_test" ]
        then
            echo "::set-output name=repository::Jammy2211/PyAutoLens"
            echo "::set-output name=workspace_repository::Jammy2211/autolens_workspace_test"
            echo "::set-output name=project::autolens"
        else
            echo "::set-output name=repository::rhayes777/PyAutoFit"
            echo "::set-output name=workspace_repository::Jammy2211/autofit_workspace"
            echo "::set-output name=project::autofit"
        fi

    - uses: actions/checkout@v2
      with:
          path: PyAutoBuild
    - name: Checkout project
      uses: actions/checkout@v2
      with:
        repository: "${{ steps.configure.outputs.repository }}"
        path: project
    - name: Checkout workspace
      uses: actions/checkout@v2
      with:
        repository: ${{ steps.configure.outputs.workspace_repository }}
        ref: master
        path: workspace
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install optional requirements
      run: |
        if [ -f "project/optional_requirements.txt" ]
        then
            echo "Installing optional requirements"
            pip install Cython
            python3 -m pip install -r "project/optional_requirements.txt"
        fi
    - name: Install project
      run: |
        python3 -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple "${{ steps.configure.outputs.project }}==${{ needs.version_number.outputs.version_number }}"
    - name: Run Python scripts
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)/PyAutoBuild
        export PATH=$PATH:$(pwd)/PyAutoBuild/autobuild
        ls "$HOME/*"
        
        pushd "$HOME/workspace/${{ matrix.project.parent_directory }}/${{ matrix.project.directory }}"
        python3 "$HOME/PyAutoBuild/autobuild/run_python.py" ${{ matrix.project.name }}

  run_notebooks:
    runs-on: ubuntu-latest
    needs:
      - release_test_pypi
      - version_number
      - find_scripts
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]
        project:
            ${{ fromJSON(needs.find_scripts.outputs.scripts_matrix) }}
    steps:
    - name: Configure
      id: configure
      run: |
        if [ ${{ matrix.project.name }} == "autolens" ]
        then
            echo "::set-output name=repository::Jammy2211/PyAutoLens"
            echo "::set-output name=workspace_repository::Jammy2211/autolens_workspace"
            echo "::set-output name=project::autolens"
        elif [ ${{ matrix.project.name }} == "autolens_test" ]
        then
            echo "::set-output name=repository::Jammy2211/PyAutoLens"
            echo "::set-output name=workspace_repository::Jammy2211/autolens_workspace"
            echo "::set-output name=project::autolens"
        else
            echo "::set-output name=repository::rhayes777/PyAutoFit"
            echo "::set-output name=workspace_repository::Jammy2211/autofit_workspace"
            echo "::set-output name=project::autofit"
        fi

    - uses: actions/checkout@v2
      with:
          path: PyAutoBuild
    - name: Checkout project
      uses: actions/checkout@v2
      with:
        repository: "${{ steps.configure.outputs.repository }}"
        path: project
    - name: Checkout workspace
      uses: actions/checkout@v2
      with:
        repository: ${{ steps.configure.outputs.workspace_repository }}
        ref: master
        path: workspace
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install optional requirements
      run: |
        if [ -f "project/optional_requirements.txt" ]
        then
            echo "Installing optional requirements"
            pip install Cython
            python3 -m pip install -r "project/optional_requirements.txt"
        fi
    - name: Install project
      run: |
        python3 -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple "${{ steps.configure.outputs.project }}==${{ needs.version_number.outputs.version_number }}"
    - name: Generate jupyter notebooks
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)/PyAutoBuild
        pushd "$HOME/workspace"
        python3 "$HOME/workspace/PyAutoBuild/autobuild/generate.py" ${{ matrix.project.name }}
    - name: Run jupyter notebooks
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)/PyAutoBuild
        pushd "$HOME/workspace/${{ matrix.project.parent_directory }}/${{ matrix.project.directory }}"
        python3 "$HOME/workspace/PyAutoBuild/autobuild/run.py" ${{ matrix.project.name }}

#  release:
#    runs-on: ubuntu-latest
#    env:
#      TWINE_REPOSITORY: pypi
#      TWINE_USERNAME: __token__
#      TWINE_PASSWORD: ${{ secrets.PYPI }}
#    needs:
#      - run_scripts
#      - run_notebooks
#      - release_test_pypi
#      - version_number
#    strategy:
#      matrix:
#        project:
#        - repository: rhayes777/PyAutoConf
#          ref: master
#          path: PyAutoConf
#          pat: PAT_RICH
#        - repository: rhayes777/PyAutoFit
#          ref: master
#          path: PyAutoFit
#          pat: PAT_RICH
#        - repository: Jammy2211/PyAutoArray
#          ref: master
#          path: PyAutoArray
#          pat: PAT_JAMES
#        - repository: Jammy2211/PyAutoGalaxy
#          ref: master
#          path: PyAutoGalaxy
#          pat: PAT_JAMES
#        - repository: Jammy2211/PyAutoLens
#          ref: master
#          path: PyAutoLens
#          pat: PAT_JAMES
#    steps:
#    - uses: actions/checkout@v2
#      with:
#          path: PyAutoBuild
#    - name: Checkout
#      run: |
#        git clone -b "${{ matrix.project.ref }}" "https://$PAT@github.com/${{ matrix.project.repository }}.git" "${{ matrix.project.path }}"
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v2
#      with:
#        python-version: ${{ matrix.python-version }}
#    - name: Configure Git
#      run: |
#        git config --global user.email "richard@rghsoftware.co.uk"
#        git config --global user.name "GitHub Actions bot"
#    - name: Update version
#      run: |
#        pushd "${{ matrix.project.path }}"
#        VERSION="${{ needs.version_number.outputs.version_number }}"
#        sed -i "s/__version__ = [\.\"\'0-9]*/__version__ = \"$VERSION\"/g" */__init__.py
#        git commit "-am 'Updated version in __init__ to $VERSION"
#    - name: Tag
#      run: |
#        pushd "${{ matrix.project.path }}"
#        VERSION="${{ needs.version_number.outputs.version_number }}"
#        git tag -m "Release $VERSION" -a "$VERSION"
#        PAT="${{ secrets[matrix.project.pat] }}"
#        git remote set-url --push origin "https://$PAT@github.com/${{ matrix.project.repository }}.git"
#        git push --tags
#    - name: Build
#      run: |
#        pushd "${{ matrix.project.path }}"
#        export VERSION="${{ needs.version_number.outputs.version_number }}"
#        python3 -m pip install --upgrade build
#        python3 -m build
#    - name: Upload to PyPI
#      run: |
#        python3 -m pip install twine
#        pushd "${{ matrix.project.path }}"
#        python3 -m twine upload dist/*
#
#  release_workspaces:
#    runs-on: ubuntu-latest
#    env:
#      TWINE_REPOSITORY: pypi
#      TWINE_USERNAME: __token__
#      TWINE_PASSWORD: ${{ secrets.PYPI }}
#      PAT: ${{ secrets.PAT_JAMES }}
#    needs:
#      - run_scripts
#      - run_notebooks
#      - release_test_pypi
#      - version_number
#    strategy:
#      matrix:
#        python-version: [3.8]
#        workspace:
#          - repository: Jammy2211/autolens_workspace
#            name: autolens
#            path: autolens_workspace
#          - repository: Jammy2211/autofit_workspace
#            name: autofit
#            path: autofit_workspace
#    steps:
#    - uses: actions/checkout@v2
#      with:
#          path: PyAutoBuild
#    - name: Checkout
#      run: |
#        git clone -b master "https://$PAT@github.com/${{ matrix.workspace.repository }}.git" "${{ matrix.workspace.path }}"
#    - name: Configure Git
#      run: |
#        git config --global user.email "richard@rghsoftware.co.uk"
#        git config --global user.name "GitHub Actions bot"
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v2
#      with:
#        python-version: ${{ matrix.python-version }}
#    - name: Install Jupyter dependency
#      run: |
#        pip install jupyter ipynb-py-convert
#    - name: Update jupyter notebooks
#      run: |
#        pushd PyAutoBuild
#        export PYTHONPATH=$PYTHONPATH:../
#        python3 "${{ matrix.workspace.name }}/generate.py"
#        popd
#        pushd "${{ matrix.workspace.path}}"
#        git add *.ipynb
#        git commit -m "Updated notebooks"
#    - name: Release
#      run: |
#        cd "${{ matrix.workspace.path }}"
#        git checkout release
#        git merge master
#        VERSION="${{ needs.version_number.outputs.version_number }}"
#        git tag -m "Release $VERSION" -a "$VERSION"
#        git push
#        git push --tags