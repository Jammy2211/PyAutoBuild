name: Autolens Release process

on: 
  workflow_dispatch:
    inputs:
      minor_version:
        description: 'Minor version to release'
        required: true
        default: '1'
  push:

jobs:
  version_number:
    runs-on: ubuntu-latest
    outputs:
      version_number: ${{ steps.version_number.outputs.version_number }}
    steps:
      - name: Compute version number
        run: |
          export DATE_FORMATTED=`date +"%Y.%-m.%-d"`
          MINOR_VERSION="${{ github.event.inputs.minor_version }}"
          VERSION="${DATE_FORMATTED}.${MINOR_VERSION:-${{ github.run_number }}}"
          RUN_ATTEMPT="${{ github.run_attempt }}"
          if [ "$RUN_ATTEMPT" -gt "1" ]
          then
              VERSION="$VERSION.$RUN_ATTEMPT"
          fi
          export VERSION
          echo "::set-output name=version_number::${VERSION}"
        id: version_number

#   release_test_pypi:
#         runs-on: ubuntu-latest
#         needs: version_number
#         env:
#           TWINE_REPOSITORY: testpypi
#           TWINE_USERNAME: __token__
#           TWINE_PASSWORD: ${{ secrets.TEST_PYPI }}
#         strategy:
#           matrix:
#             python-version: [3.8]  # 3.9 not supported on numba as of 2020-02-11
#             project:
#               - repository: rhayes777/PyAutoConf
#                 ref: master
#                 path: PyAutoConf
#               - repository: rhayes777/PyAutoFit
#                 ref: master
#                 path: PyAutoFit
#               - repository: Jammy2211/PyAutoArray
#                 ref: master
#                 path: PyAutoArray
#               - repository: Jammy2211/PyAutoGalaxy
#                 ref: master
#                 path: PyAutoGalaxy
#               - repository: Jammy2211/PyAutoLens
#                 ref: master
#                 path: PyAutoLens
#         steps:
#         - uses: actions/checkout@v2
#           with:
#               path: PyAutoBuild
#         - name: Checkout
#           uses: actions/checkout@v2
#           with:
#             repository: "${{ matrix.project.repository }}"
#             ref: "${{ matrix.project.ref }}"
#             path: "${{ matrix.project.path }}"
#         - name: Set up Python ${{ matrix.python-version }}
#           uses: actions/setup-python@v2
#           with:
#             python-version: ${{ matrix.python-version }}
#         - name: Build
#           run: |
#             pushd "${{ matrix.project.path }}"
#             export VERSION="${{ needs.version_number.outputs.version_number }}"
#             sed -i "s/__version__ = [\.\"\'0-9]*/__version__ = \"$VERSION\"/g" */__init__.py
#             python3 -m pip install --upgrade build
#             python3 -m build
#             popd
#         - name: Upload to test PyPI
#           run: |
#             python3 -m pip install twine
#             pushd "${{ matrix.project.path }}"
#             python3 -m twine upload --repository testpypi dist/*
#             popd
#         - name: Wait for packages to upload to Pypi
#           shell: bash {0}   # So that we do not exit if a command gives a bad exit code
#           run: |
#             export PACKAGES=("autoconf" "autoarray" "autofit" "autogalaxy" "autolens")
#             export VERSION="${{ needs.version_number.outputs.version_number }}"
#             for PACKAGE in ${PACKAGES[@]}; do
#               python3 -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple $PACKAGE==$VERSION
#               test_condition=$?
#               cnt=0
#               while [[ $test_condition != "0" ]]; do
#                 echo "Failed to find package, retrying in 10 seconds.."
#                 sleep 10
#                 ((cnt=cnt+1))
#                 [[ $cnt == "100" ]] && echo "Timed out, tried 100 times" && break
#                 python3 -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple $PACKAGE==$VERSION
#                 test_condition=$?
#               done
#             done
#         - name: Run unittests
#           run: |
#             pushd "${{ matrix.project.path }}"
#             if test -f "optional_requirements.txt"
#             then
#               pip install Cython
#               pip install -r optional_requirements.txt
#             fi
#             python3 -m pytest
#
#   run_scripts:
#     runs-on: ubuntu-latest
#     needs: release_test_pypi
#     strategy:
#       matrix:
#         python-version: [3.8]
#         project:
#           - repository: Jammy2211/PyAutoLens
#             path: PyAutoLens
#             workspace:
#               repository: Jammy2211/autolens_workspace
#               path: autolens_workspace
#               name: autolens
#           - repository: rhayes777/PyAutoFit
#             path: PyAutoFit
#             workspace:
#               repository: Jammy2211/autofit_workspace
#               path: autofit_workspace
#               name: autofit
#     steps:
#     - uses: actions/checkout@v2
#       with:
#           path: PyAutoBuild
#     - name: Checkout project
#       uses: actions/checkout@v2
#       with:
#         repository: "${{ matrix.project.repository }}"
#         ref: "${{ matrix.project.ref }}"
#         path: "${{ matrix.project.path }}"
#     - name: Checkout workspace
#       uses: actions/checkout@v2
#       with:
#         repository: ${{ matrix.project.workspace.repository }}
#         ref: master
#         path: ${{ matrix.project.workspace.path }}
#     - name: Set up Python ${{ matrix.python-version }}
#       uses: actions/setup-python@v2
#       with:
#         python-version: ${{ matrix.python-version }}
#     - name: Install optional requirements
#       if: test -f "${{ matrix.project.path }}/optional_requirements.txt"
#       run: |
#         echo "Installing optional requirements"
#         pip install Cython
#         python3 -m pip install -r "${{ matrix.project.path }}/optional_requirements.txt"
#     - name: Install project
#       run: |
#         python3 -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple "autolens==${{ needs.version_number.outputs.version_number }}"
#     - name: Run Python scripts
#       run: |
#         pushd PyAutoBuild
#         export PYTHONPATH=$PYTHONPATH:../
#         python3 "${{ matrix.project.workspace.name }}/run_python.py"
#
#   run_notebooks:
#     runs-on: ubuntu-latest
#     needs: release_test_pypi
#     strategy:
#       matrix:
#         python-version: [3.8]
#         project:
#           - repository: Jammy2211/PyAutoLens
#             path: PyAutoLens
#             workspace:
#               repository: Jammy2211/autolens_workspace
#               path: autolens_workspace
#               name: autolens
#           - repository: rhayes777/PyAutoFit
#             path: PyAutoFit
#             workspace:
#               repository: Jammy2211/autofit_workspace
#               path: autofit_workspace
#               name: autofit
#     steps:
#     - uses: actions/checkout@v2
#       with:
#           path: PyAutoBuild
#     - name: Checkout project
#       uses: actions/checkout@v2
#       with:
#         repository: "${{ matrix.project.repository }}"
#         ref: "${{ matrix.project.ref }}"
#         path: "${{ matrix.project.path }}"
#     - name: Checkout workspace
#       uses: actions/checkout@v2
#       with:
#         repository: ${{ matrix.project.workspace.repository }}
#         ref: master
#         path: ${{ matrix.project.workspace.path }}
#     - name: Set up Python ${{ matrix.python-version }}
#       uses: actions/setup-python@v2
#       with:
#         python-version: ${{ matrix.python-version }}
#     - name: Install optional requirements
#       if: test -f "${{ matrix.project.path }}/optional_requirements.txt"
#       run: |
#         echo "Installing optional requirements"
#         pip install Cython
#         python3 -m pip install -r "${{ matrix.project.path }}/optional_requirements.txt"
#     - name: Install project
#       run: |
#         python3 -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple "autolens==${{ needs.version_number.outputs.version_number }}"
#     - name: Install Jupyter dependency
#       run: |
#         pip install jupyter ipynb-py-convert
#     - name: Generate jupyter notebooks
#       run: |
#         pushd PyAutoBuild
#         export PYTHONPATH=$PYTHONPATH:../
#         python3 "${{ matrix.project.workspace.name }}/generate.py"
#     - name: Run jupyter notebooks
#       run: |
#         pushd PyAutoBuild
#         export PYTHONPATH=$PYTHONPATH:../
#         python3 "${{ matrix.project.workspace.name }}/run.py"

  release:
    runs-on: ubuntu-latest
    env:
      TWINE_REPOSITORY: pypi
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.PYPI }}
    needs:
#       - run_scripts
#       - run_notebooks
#       - release_test_pypi
      - version_number
    strategy:
      matrix:
        project:
#         - repository: rhayes777/PyAutoConf
#           ref: master
#           path: PyAutoConf
        - repository: rhayes777/PyAutoFit
          ref: master
          path: PyAutoFit
          pat: PAT_RICH
#         - repository: Jammy2211/PyAutoArray
#           ref: master
#           path: PyAutoArray
#         - repository: Jammy2211/PyAutoGalaxy
#           ref: master
#           path: PyAutoGalaxy
#         - repository: Jammy2211/PyAutoLens
#           ref: master
#           path: PyAutoLens
    steps:
    - uses: actions/checkout@v2
      with:
          path: PyAutoBuild
    - name: Checkout
      uses: actions/checkout@v2
      with:
        repository: "${{ matrix.project.repository }}"
        ref: "${{ matrix.project.ref }}"
        path: "${{ matrix.project.path }}"
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Configure Git
      run: |
        git config --global user.email "richard@rghsoftware.co.uk"
        git config --global user.name "GitHub Actions bot"
    - name: Update version
      run: |
        pushd "${{ matrix.project.path }}"
        export VERSION="${{ needs.version_number.outputs.version_number }}"
        sed -i "s/__version__ = [\.\"\'0-9]*/__version__ = \"$VERSION\"/g" */__init__.py
        git commit "-am 'Updated version in __init__ to $VERSION"
    - name: Tag
      run: |
        pushd "${{ matrix.project.path }}"
        VERSION="${{ needs.version_number.outputs.version_number }}"
        echo "Tagging"
        git tag -m "Release $VERSION" -a "$VERSION"
        echo "Pushing"
        PAT="${{ secrets[matrix.project.pat] }}"
        if [ -z "$PAT" ]; then echo "NULL"; else echo "Not NULL"; fi
        git push --tags https://$PAT@github.com/${{ matrix.project.repository }}.git
    - name: Build
      run: |
        python3 -m pip install --upgrade build
        python3 -m build
        popd
    - name: Upload to PyPI
      run: |
        python3 -m pip install twine
        pushd "${{ matrix.project.path }}"
        python3 -m twine upload dist/*
        popd
